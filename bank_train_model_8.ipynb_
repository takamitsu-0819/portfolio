{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMexa4OdmJECYf8jVRJx6wk"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["#特徴量全使用+全ダミー化\n","#day+month循環数化\n","#特徴量11\n","#スコア：0.9380116"],"metadata":{"id":"vXYSWYpx_iqy"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":1,"metadata":{"id":"HjM5VZH9wsx8","executionInfo":{"status":"ok","timestamp":1721625828802,"user_tz":-540,"elapsed":6220,"user":{"displayName":"髙光耕平","userId":"17386064361986607853"}}},"outputs":[],"source":["import glob\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import re\n","%matplotlib inline"]},{"cell_type":"code","source":["#データ読込\n","df=pd.read_csv(\"/content/bank_train.csv\")"],"metadata":{"id":"E62p7BGCxngP","executionInfo":{"status":"ok","timestamp":1721625828802,"user_tz":-540,"elapsed":4,"user":{"displayName":"髙光耕平","userId":"17386064361986607853"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["#dtype確認\n","df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XfaeaDz3yMky","executionInfo":{"status":"ok","timestamp":1721625828802,"user_tz":-540,"elapsed":3,"user":{"displayName":"髙光耕平","userId":"17386064361986607853"}},"outputId":"a6541637-0fce-4faa-a928-8267d24ba98f"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 24274 entries, 0 to 24273\n","Data columns (total 18 columns):\n"," #   Column     Non-Null Count  Dtype \n","---  ------     --------------  ----- \n"," 0   id         24274 non-null  int64 \n"," 1   age        24274 non-null  int64 \n"," 2   job        24274 non-null  object\n"," 3   marital    24274 non-null  object\n"," 4   education  24274 non-null  object\n"," 5   default    24274 non-null  object\n"," 6   balance    24274 non-null  int64 \n"," 7   housing    24274 non-null  object\n"," 8   loan       24274 non-null  object\n"," 9   contact    24274 non-null  object\n"," 10  day        24274 non-null  int64 \n"," 11  month      24274 non-null  object\n"," 12  duration   24274 non-null  int64 \n"," 13  campaign   24274 non-null  int64 \n"," 14  pdays      24274 non-null  int64 \n"," 15  previous   24274 non-null  int64 \n"," 16  poutcome   24274 non-null  object\n"," 17  y          24274 non-null  int64 \n","dtypes: int64(9), object(9)\n","memory usage: 3.3+ MB\n"]}]},{"cell_type":"code","source":["\n","#使用col\n","use_cols = [\"id\",\n","    \"age\",\n","    'job',\n","    'marital',\n","    'education',\n","    'default',\n","    \"balance\",\n","    \"housing\",\n","    \"loan\",\n","    \"contact\",\n","    \"day\",\n","    \"month\",\n","    \"duration\",\n","    \"campaign\",\n","    'pdays',\n","    'previous',\n","    \"poutcome\",\n","    \"y\"\n","]"],"metadata":{"id":"Sim7JF1srNAP","executionInfo":{"status":"ok","timestamp":1721625829320,"user_tz":-540,"elapsed":519,"user":{"displayName":"髙光耕平","userId":"17386064361986607853"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["df_use = df[use_cols]"],"metadata":{"id":"r0tR-GZorPQn","executionInfo":{"status":"ok","timestamp":1721625829321,"user_tz":-540,"elapsed":3,"user":{"displayName":"髙光耕平","userId":"17386064361986607853"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["df_use.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E9BkvrBkBKPb","executionInfo":{"status":"ok","timestamp":1721625829321,"user_tz":-540,"elapsed":3,"user":{"displayName":"髙光耕平","userId":"17386064361986607853"}},"outputId":"5e6de25c-f4e0-4a68-a316-d6890464a93a"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 24274 entries, 0 to 24273\n","Data columns (total 18 columns):\n"," #   Column     Non-Null Count  Dtype \n","---  ------     --------------  ----- \n"," 0   id         24274 non-null  int64 \n"," 1   age        24274 non-null  int64 \n"," 2   job        24274 non-null  object\n"," 3   marital    24274 non-null  object\n"," 4   education  24274 non-null  object\n"," 5   default    24274 non-null  object\n"," 6   balance    24274 non-null  int64 \n"," 7   housing    24274 non-null  object\n"," 8   loan       24274 non-null  object\n"," 9   contact    24274 non-null  object\n"," 10  day        24274 non-null  int64 \n"," 11  month      24274 non-null  object\n"," 12  duration   24274 non-null  int64 \n"," 13  campaign   24274 non-null  int64 \n"," 14  pdays      24274 non-null  int64 \n"," 15  previous   24274 non-null  int64 \n"," 16  poutcome   24274 non-null  object\n"," 17  y          24274 non-null  int64 \n","dtypes: int64(9), object(9)\n","memory usage: 3.3+ MB\n"]}]},{"cell_type":"code","source":["\n","def data_pre(df):\n","    #月+日の循環数化\n","    dic={\"jan\":1,\"feb\":2,\"mar\":3,\"apr\":4,\"may\":5,\"jun\":6,\"jul\":7,\"aug\":8,\"sep\":9,\"oct\":10,\"nov\":11,\"dec\":12}\n","    df[\"month\"]=df[\"month\"].map(dic).astype(int)\n","    df[\"day\"]=df[\"day\"].astype(int)\n","\n","    total_days_in_year = 365  # 仮定として、1年が365日とする\n","    month_day_number = (df[\"month\"] - 1) * 31 + df[\"day\"]  # 仮定として、1月から12月まで31日とする\n","    angle = (2 * np.pi * month_day_number) / total_days_in_year\n","\n","    df[\"month_day_sin\"] = np.sin(angle)\n","    df[\"month_day_cos\"] = np.cos(angle)\n","\n","    df = df.drop(columns=['month'], axis=1)\n","    df = df.drop(columns=['day'], axis=1)\n","\n","    #IDカテゴリー化\n","    df[\"id\"]=df[\"id\"].astype(\"category\")\n","\n","    #job列のダミー変数化\n","    dummies_job=pd.get_dummies(df[\"job\"], dtype=int,drop_first=True,prefix=\"job\")\n","    df = pd.concat([df, dummies_job], axis=1)\n","    df.drop(columns=['job'], inplace=True)\n","\n","    #marital列のダミー変数化\n","    dummies_marital=pd.get_dummies(df[\"marital\"], dtype=int,drop_first=True,prefix=\"marital\")\n","    df = pd.concat([df, dummies_marital], axis=1)\n","    df.drop(columns=['marital'], inplace=True)\n","\n","    #education列のダミー変数化\n","    dummies_education=pd.get_dummies(df[\"education\"], dtype=int,drop_first=True,prefix=\"education\")\n","    df = pd.concat([df, dummies_education], axis=1)\n","    df.drop(columns=['education'], inplace=True)\n","\n","    #default列のダミー変数化+置換\n","    dummies_default=pd.get_dummies(df[\"default\"], dtype=int,drop_first=True,prefix=\"default\")\n","    df = pd.concat([df, dummies_default], axis=1)\n","    df.drop(columns=['default'], inplace=True)\n","\n","    #housing列のダミー変数化+置換\n","    dummies_housing=pd.get_dummies(df[\"housing\"], dtype=int,drop_first=True,prefix=\"housing\")\n","    df = pd.concat([df, dummies_housing], axis=1)\n","    df.drop(columns=['housing'], inplace=True)\n","\n","    #loan列のダミー変数化\n","    dummies_loan=pd.get_dummies(df[\"loan\"], dtype=int,drop_first=True,prefix=\"loan\")\n","    df = pd.concat([df, dummies_loan], axis=1)\n","    df.drop(columns=['loan'], inplace=True)\n","\n","    #contact列のダミー変数化+置換\n","    dummies_contact=pd.get_dummies(df[\"contact\"], dtype=int,drop_first=True,prefix=\"contact\")\n","    df = pd.concat([df, dummies_contact], axis=1)\n","    df.drop(columns=['contact'], inplace=True)\n","\n","    #poutcome列のダミー変数化+置換\n","    dummies_poutcome=pd.get_dummies(df[\"poutcome\"], dtype=int,drop_first=True,prefix=\"poutcome\")\n","    df = pd.concat([df, dummies_poutcome], axis=1)\n","    df.drop(columns=['poutcome'], inplace=True)\n","\n","\n","\n","    return df\n","\n","\n","df_use=data_pre(df_use)"],"metadata":{"id":"IUhm9siNBSUU","executionInfo":{"status":"ok","timestamp":1721625831016,"user_tz":-540,"elapsed":562,"user":{"displayName":"髙光耕平","userId":"17386064361986607853"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["df_use.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-FPwQB7YteGx","executionInfo":{"status":"ok","timestamp":1720585541103,"user_tz":-540,"elapsed":3,"user":{"displayName":"髙光耕平","userId":"17386064361986607853"}},"outputId":"4efee961-cb41-40f0-8b76-7a1077f57923"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 27128 entries, 0 to 27127\n","Data columns (total 16 columns):\n"," #   Column             Non-Null Count  Dtype   \n","---  ------             --------------  -----   \n"," 0   id                 27128 non-null  category\n"," 1   age                27128 non-null  int64   \n"," 2   balance            27128 non-null  int64   \n"," 3   duration           27128 non-null  int64   \n"," 4   campaign           27128 non-null  int64   \n"," 5   pdays              27128 non-null  int64   \n"," 6   previous           27128 non-null  int64   \n"," 7   y                  27128 non-null  int64   \n"," 8   month_day_sin      27128 non-null  float64 \n"," 9   month_day_cos      27128 non-null  float64 \n"," 10  housing_yes        27128 non-null  int64   \n"," 11  contact_telephone  27128 non-null  int64   \n"," 12  contact_unknown    27128 non-null  int64   \n"," 13  poutcome_other     27128 non-null  int64   \n"," 14  poutcome_success   27128 non-null  int64   \n"," 15  poutcome_unknown   27128 non-null  int64   \n","dtypes: category(1), float64(2), int64(13)\n","memory usage: 4.4 MB\n"]}]},{"cell_type":"code","source":["import lightgbm as lgb\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_absolute_error as mae\n","\n","\n","df_train,df_val =train_test_split(df_use,test_size=0.2,random_state=42)\n","\n","col = \"y\"\n","train_y = df_train[col]\n","train_x = df_train.drop(col,axis=1)\n","\n","val_y = df_val[col]\n","val_x =df_val.drop(col,axis=1)\n","\n","trains = lgb.Dataset(train_x,train_y)\n","valids = lgb.Dataset(val_x,val_y)\n","\n","params = {\n","    'objective': 'binary',      # 二値分類\n","    'metric': 'binary_logloss',       # 評価指標：（ロジスティック損失）\n","    'num_leaves': 31,               # 葉の数\n","    'learning_rate': 0.1,          # 学習率\n","    'feature_fraction': 1.0,        # 特徴量のサブサンプル率\n","    'bagging_fraction': 1.0,        # バギングのサブサンプル率\n","    'bagging_freq': 0,              # バギングの頻度\n","    'max_depth': -1,                # ツリーの最大深さ（制限なし）\n","    'min_data_in_leaf': 20        # 葉の最小データ数\n","    }\n","\n","model = lgb.train(\n","    params,\n","    trains,\n","    valid_sets=valids,\n","    num_boost_round=1000,\n","    callbacks=[lgb.early_stopping(stopping_rounds=100)])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jo4wnjAp5Zf6","executionInfo":{"status":"ok","timestamp":1721625883078,"user_tz":-540,"elapsed":2457,"user":{"displayName":"髙光耕平","userId":"17386064361986607853"}},"outputId":"7e036d5d-8f8e-4eb4-d192-ac9b426eb8e8"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["[LightGBM] [Info] Number of positive: 2339, number of negative: 17080\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.003721 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 1409\n","[LightGBM] [Info] Number of data points in the train set: 19419, number of used features: 33\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.120449 -> initscore=-1.988185\n","[LightGBM] [Info] Start training from score -1.988185\n","Training until validation scores don't improve for 100 rounds\n","Early stopping, best iteration is:\n","[69]\tvalid_0's binary_logloss: 0.194495\n"]}]},{"cell_type":"code","source":["import lightgbm as lgb\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_absolute_error as mae\n","\n","\n","df_train,df_val =train_test_split(df_use,test_size=0.2,random_state=42)\n","\n","col = \"y\"\n","train_y = df_train[col]\n","train_x = df_train.drop(col,axis=1)\n","\n","val_y = df_val[col]\n","val_x =df_val.drop(col,axis=1)\n","\n","trains = lgb.Dataset(train_x,train_y)\n","valids = lgb.Dataset(val_x,val_y)\n","\n","params = {\n","    'objective': 'binary',      # 二値分類\n","    'metric': 'binary_logloss',       # 評価指標：（ロジスティック損失）\n","    'num_leaves': 31,               # 葉の数\n","    'learning_rate': 0.1,          # 学習率\n","    'feature_fraction': 1.0,        # 特徴量のサブサンプル率\n","    'bagging_fraction': 1.0,        # バギングのサブサンプル率\n","    'bagging_freq': 5,              # バギングの頻度\n","    'max_depth': -1,                # ツリーの最大深さ（制限なし）\n","    'min_data_in_leaf': 1        # 葉の最小データ数\n","    }\n","\n","model = lgb.train(\n","    params,\n","    trains,\n","    valid_sets=valids,\n","    num_boost_round=1000,\n","    callbacks=[lgb.early_stopping(stopping_rounds=100)])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"98l6lNW973jU","executionInfo":{"status":"ok","timestamp":1720585542838,"user_tz":-540,"elapsed":1737,"user":{"displayName":"髙光耕平","userId":"17386064361986607853"}},"outputId":"37ef92ca-1f29-4d56-e184-61528e4d5899"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[LightGBM] [Info] Number of positive: 2565, number of negative: 19137\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.003105 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 1386\n","[LightGBM] [Info] Number of data points in the train set: 21702, number of used features: 15\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.118192 -> initscore=-2.009665\n","[LightGBM] [Info] Start training from score -2.009665\n","Training until validation scores don't improve for 100 rounds\n","Early stopping, best iteration is:\n","[46]\tvalid_0's binary_logloss: 0.186342\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import mean_squared_error, mean_absolute_error\n","\n","# モデルの予測\n","pred_y = model.predict(val_x, num_iteration=model.best_iteration)\n","\n","# 平均二乗誤差（MSE）や平均絶対誤差（MAE）の計算\n","mse = mean_squared_error(val_y, pred_y)\n","mae = mean_absolute_error(val_y, pred_y)\n","print(f'MSE: {mse}, MAE: {mae}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CIwbs8if0Yqe","executionInfo":{"status":"ok","timestamp":1721625899680,"user_tz":-540,"elapsed":369,"user":{"displayName":"髙光耕平","userId":"17386064361986607853"}},"outputId":"0d08df11-d6eb-42ad-b9a7-2c643fca1898"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["MSE: 0.06150700794997782, MAE: 0.12147909545772537\n"]}]},{"cell_type":"code","source":["# 予測値から確率に変換する関数\n","def sigmoid(x):\n","    return 1 / (1 + np.exp(-x))\n","\n","# モデルの予測値を確率に変換\n","pred_probs = sigmoid(pred_y)\n","from sklearn.metrics import roc_auc_score, roc_curve\n","import matplotlib.pyplot as plt\n","\n","# ROC曲線とAUCの計算\n","fpr, tpr, thresholds = roc_curve(val_y, pred_probs)\n","auc = roc_auc_score(val_y, pred_probs)\n","\n","# ROC曲線のプロット\n","plt.figure(figsize=(8, 6))\n","plt.plot(fpr, tpr, label=f'AUC = {auc:.2f}')\n","plt.plot([0, 1], [0, 1], linestyle='--', color='r', label='Random')\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic (ROC) Curve')\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"kDBvCoQ52sQx","executionInfo":{"status":"ok","timestamp":1721625902193,"user_tz":-540,"elapsed":656,"user":{"displayName":"髙光耕平","userId":"17386064361986607853"}},"outputId":"ba412306-9d80-4df2-bcf8-6bac4097915e"},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"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atWqhru7u7FkyRL7bWPHjrUfGxUVZTz77LP2n8siRYoYYWFhxubNm2+Z6dp7ePbs2cmef8+ePUbHjh2NwoULG97e3kbFihVTFIOpKV26tNG7d+8U7akVs4ZhGI8++qgBGKdOnbK3zZs3zwCMV199NdXnuHTpkhEQEGBUrlzZ3jZ//nwDMN54441bZrxm+/btBmAsXrz4psc5+t7t1atXqn84XHtP3yi187xw4UIjMDAw1dcxMjLS8PLyMp5//nl7W3rfU5J3pP8zGxEndO0jxsDAQHvbrl27aNy4MSVLluSll14iX758LFy4kA4dOvDNN9/w0EMPAXD58mWaNm3Knj17ePzxx6lbty4REREsW7aMEydOULhwYWw2Gw8++CC///47/fv3p0qVKuzYsYPJkyezf/9+li5dmmquevXqUa5cORYuXEivXr2S3bZgwQICAwNp06YNYA4FuOuuu3BxcWHQoEEUKVKEH374gb59+xIVFcVzzz2X7P6vvfYanp6eDBs2jLi4uDQ/Xv/2228B6NmzZ6q3u7u7061bN1555RXWrVtHWFiY/ba5c+cSHR3NwIEDiY2NZerUqbRq1YodO3ZQtGhRh17na55++mmKFCnCmDFjiImJAeDPP/9k/fr1dOnShVKlSnH06FE++ugjWrRowe7du/H19aVZs2YMHjyY9957j5EjR1KlShUA+79pmThxIq6urgwbNozIyEjeeustunfvzh9//GE/5qOPPmLQoEE0bdqUIUOGcPToUTp06EBgYOAtP1794YcfSExM5LHHHrvpcf/VqVMnypYty4QJE9iyZQuffvopQUFBvPnmm8lyVatWjQcffBB3d3e+/fZbnn76aWw2GwMHDkz2ePv27aNr1648+eST9OvXj0qVKjn0GHPmzOHxxx+nWrVqjBgxgoCAALZu3cqKFSvo1q0bo0aNIjIykhMnTjB58mQA8ufPD+Dwz8fPP//MwoULGTRoEIULFyYkJCTV1+ipp55i0aJFDBo0iKpVq3L+/Hl+//139uzZQ926dW+aKTV///03TZs2xcPDg/79+xMSEsKhQ4f49ttvUwwHuNHJkyc5duwYdevWTfOY/7p2AVpAQIC97VY/i/7+/rRv357PPvuMgwcPcscdd7Bs2TIAh95fVatWxcfHh3Xr1qX4+btRRt+76fXf81yhQgUeeughFi9ezMcf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f36jTZs2xt69e1N9LWfMmGGUK1fOcHNzS9eiCf99ndKaTP+9994zypQpY3h5eRn169c31q1bZ4SGhhr33ntvOl5dc7WkTz/91GjatKnh7+9veHh4GGXKlDH69OmTbOqjtFYAu/b63LhQxLJly4yaNWsa3t7eRkhIiPHmm28as2bNSnHctUUTUpPex7h2bKNGjQwfHx+jQIECRv369Y158+bZb798+bLRrVs3IyAgIMWiCen9+eDfyfRTww1Tc8XFxRkvvPCCUatWLcPPz8/Ily+fUatWrRQLPqSVKa3zvHPnTuOhhx4yAgICDG9vb6NSpUrG6NGjU81zoy1bthhAiqmi0lo0wTAMY82aNSmmGzMMwzh79qwxdOhQ44477jC8vLyMgIAAIywszD4dV2ouXrxojBkzxqhRo4bh6+treHt7G9WrVzdGjBhhnD59OtmxDRo0MHr06HHL7+ma9L53DcMwfvrpJ6N69eqGp6enUalSJeOLL7646aIJabHZbEZwcLABGK+//nqqx6T3PSV5h4thZNLVDiKS6x09epSyZcvy9ttvM2zYMKvjWMJms1GkSBEefvjhVD/qlLyndevWlChRgs8//9zqKGnatm0bdevWZcuWLQ5dkCjiDDRmVkQkDbGxsSnGTc6dO5cLFy7QokULa0JJjjN+/HgWLFjg8AVP2WnixIk8+uijKmQlV9KYWRGRNGzcuJEhQ4bQsWNHChUqxJYtW5g5cybVq1enY8eOVseTHKJBgwbEx8dbHeOm5s+fb3UEkSyjYlZEJA0hISEEBwfz3nvvceHCBQoWLEjPnj2ZOHFistXDRETEOhozKyIiIiJOS2NmRURERMRpqZgVEREREaeV58bM2mw2Tp06hZ+fn5bCExEREcmBDMMgOjqaEiVKpFhM6L/yXDF76tQpgoODrY4hIiIiIrdw/PhxSpUqddNj8lwx6+fnB5gvToECBSxOIyIiIiL/FRUVRXBwsL1uu5k8V8xeG1pQoEABFbMiIiIiOVh6hoTqAjARERERcVoqZkVERETEaamYFRERERGnpWJWRERERJyWilkRERERcVoqZkVERETEaamYFRERERGnpWJWRERERJyWilkRERERcVoqZkVERETEaamYFRERERGnpWJWRERERJyWilkRERERcVoqZkVERETEaVlazK5du5Z27dpRokQJXFxcWLp0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ISIC2rWDe+6BhQuvt6uQFRERybANGzbg5ubG/fffn+K2NWvW4OLikuqUYyEhIUyZMiVZ2y+//MJ9991HoUKF8PX1pWrVqjz//POcPHkyi9JDbGwsAwcOpFChQuTPn59HHnmE8PDwm94nPDyc3r17U6JECXx9fbn33ns5cOBAsmOefPJJypcvj4+PD0WKFKF9+/bs3bs3y76Pa1TMZoMTF81hBtGxidn3pL/9BrVrw/Ll4OUFV67c8i4iIiJyazNnzuSZZ55h7dq1nDp1KsOP8/HHHxMWFkaxYsX45ptv2L17N9OnTycyMpJ33303ExMnN2TIEL799lu+/vprfv31V06dOsXDDz+c5vGGYdChQwcOHz7M//73P7Zu3UqZMmUICwsjJibGflxoaCizZ89mz549/PjjjxiGwT333HPbF3jdioYZZIN/O2YpkB09szYbTJwIY8ZAUhJUrAhffw01a2b9c4uIiGSAYRhcTcjagictPh5uDl2IdPnyZRYsWMBff/3FmTNnmDNnDiNHjnT4eU+cOMHgwYMZPHgwkydPtreHhITQrFmzLFtMIjIykpkzZ/LVV1/RqlUrAGbPnk2VKlXYuHEjd911V4r7HDhwgI0bN7Jz506qVasGwEcffUSxYsWYN28eTzzxBAD9+/dP9n28/vrr1KpVi6NHj1K+fPks+X5AxWy2+GXfWQCK+Hll7ROdPQs9esDKleZ+jx7w0Ufmql4iIiI51NWEJKqO+dGS5979aht8PdNfDi1cuJDKlStTqVIlevTowXPPPceIESMcvjL/66+/Jj4+nhdffDHV2wNucoF227Zt+e2339K8vUyZMuzatSvV2zZv3kxCQgJhYWH2tsqVK1O6dGk2bNiQajEbFxcHgPcNwxRdXV3x8vLi999/txezN4qJiWH27NmULVuW4ODgNLNmBhWz2eBg+GUAPNyyeFTHpk1mIevjA9OmQe/emjtWREQkE82cOZMePXoAcO+99xIZGcmvv/5KixYtHHqcAwcOUKBAAYoXL+5whk8//ZSrV6+mefvNFiA4c+YMnp6eKYrlokWLcubMmVTvc63YHTFiBB9//DH58uVj8uTJnDhxgtOnTyc79sMPP+TFF18kJiaGSpUqsXLlyttervZWVMxmA18vNwDuCMriHtIHHoB334U2beDfjwFERERyOh8PN3a/2say506vffv2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4erqSqVKlW7vm3Iyls9mMHToUGbMmMFnn33Gnj17GDBgADExMfTp0weAnj17MmLECPvxzz77LCtWrODdd99l7969jBs3jr/++ivFgGcRERGR7NCxY0fc3NyYNm0aFSpUYOXKlaxfv549e/bw5JNPpvhE+VbCwsKoWLEivXr1Yvv27fz222+MGjUq2THdu3fH29ubXr16sXPnTn755ReeeeYZHnvsMfsQg7zC8jGznTt35ty5c4wZM4YzZ85Qu3ZtVqxYYT8Rx44dSzbWo1GjRnz11Ve8/PLLjBw5kgoVKrB06dJk4z9EREREsou7uzuDBg3irbfeYuvWrRw+fJg2bdrg6+tL//796dChA5EOrPjp6urKkiVL6Nu3L/Xr1yckJIT33nuPe++9136Mr68vP/74I88++yx33nknvr6+PPLII0yaNCkrvsUczcUwDMPqENkpKioKf39/IiMjKVCggNVxRERE8pzY2FiOHDlC2bJl8fb2tjqOWORm7wNH6jXLhxmIiIiIiGSUilkRERERcVoqZkVERETEaamYFRERERGnpWJWRERELJHHrkGX/8is869iVkRERLLVtRWorly5YnESsdK1VdHc/rtUsYMsn2dWRERE8hY3NzcCAgI4e/YsYM6Z6uLiYnEqyU42m41z587h6+uLu/vtlaMqZkVERCTbFStWDMBe0Ere4+rqSunSpW/7DxkVsyIiIpLtXFxcKF68OEFBQSQkJFgdRyzg6emZbJXXjFIxKyIiIpZxc3O77TGTkrfpAjARERERcVoqZkVERETEaamYFRERERGnlefGzF6boDcqKsriJCIiIiKSmmt1WnoWVshzxWx0dDQAwcHBFicRERERkZuJjo7G39//pse4GHlsLTmbzcapU6fw8/PLlgmao6KiCA4O5vjx4xQoUCDLn08yn86h89M5dH46h85N58/5Zfc5NAyD6OhoSpQoccvpu/Jcz6yrqyulSpXK9uctUKCAfoCdnM6h89M5dH46h85N58/5Zec5vFWP7DW6AExEREREnJaKWRERERFxWipms5iXlxdjx47Fy8vL6iiSQTqHzk/n0PnpHDo3nT/nl5PPYZ67AExEREREcg/1zIqIiIiI01IxKyIiIiJOS8WsiIiIiDgtFbMiIiIi4rRUzGaCadOmERISgre3Nw0aNGDTpk03Pf7rr7+mcuXKeHt7U6NGDZYvX55NSSUtjpzDGTNm0LRpUwIDAwkMDCQsLOyW51yynqM/h9fMnz8fFxcXOnTokLUB5ZYcPYeXLl1i4MCBFC9eHC8vLypWrKjfpxZy9PxNmTKFSpUq4ePjQ3BwMEOGDCE2Njab0sp/rV27lnbt2lGiRAlcXFxYunTpLe+zZs0a6tati5eXF3fccQdz5szJ8pypMuS2zJ8/3/D09DRmzZpl7Nq1y+jXr58REBBghIeHp3r8unXrDDc3N+Ott94ydu/ebbz88suGh4eHsWPHjmxOLtc4eg67detmTJs2zdi6dauxZ88eo3fv3oa/v79x4sSJbE4u1zh6Dq85cuSIUbJkSaNp06ZG+/btsyespMrRcxgXF2fUq1fPuO+++4zff//dOHLkiLFmzRpj27Zt2ZxcDMPx8/fll18aXl5expdffmkcOXLE+PHHH43ixYsbQ4YMyebkcs3y5cuNUaNGGYsXLzYAY8mSJTc9/vDhw4avr68xdOhQY/fu3cb7779vuLm5GStWrMiewDdQMXub6tevbwwcONC+n5SUZJQoUcKYMGFCqsd36tTJuP/++5O1NWjQwHjyySezNKekzdFz+F+JiYmGn5+f8dlnn2VVRLmFjJzDxMREo1GjRsann35q9OrVS8WsxRw9hx999JFRrlw5Iz4+Prsiyk04ev4GDhxotGrVKlnb0KFDjcaNG2dpTkmf9BSzL774olGtWrVkbZ07dzbatGmThclSp2EGtyE+Pp7NmzcTFhZmb3N1dSUsLIwNGzakep8NGzYkOx6gTZs2aR4vWSsj5/C/rly5QkJCAgULFsyqmHITGT2Hr776KkFBQfTt2zc7YspNZOQcLlu2jIYNGzJw4ECKFi1K9erVGT9+PElJSdkVW/6VkfPXqFEjNm/ebB+KcPjwYZYvX859992XLZnl9uWkesY9258xF4mIiCApKYmiRYsmay9atCh79+5N9T5nzpxJ9fgzZ85kWU5JW0bO4X8NHz6cEiVKpPihluyRkXP4+++/M3PmTLZt25YNCeVWMnIODx8+zM8//0z37t1Zvnw5Bw8e5OmnnyYhIYGxY8dmR2z5V0bOX7du3YiIiKBJkyYYhkFiYiJPPfUUI0eOzI7IkgnSqmeioqK4evUqPj4+2ZZFPbMit2HixInMnz+fJUuW4O3tbXUcSYfo6Ggee+wxZsyYQeHCha2OIxlks9kICgrik08+ITQ0lM6dOzNq1CimT59udTRJhzVr1jB+/Hg+/PBDtmzZwuLFi/n+++957bXXrI4mTkg9s7ehcOHCuLm5ER4enqw9PDycYsWKpXqfYsWKOXS8ZK2MnMNr3nnnHSZOnMiqVauoWbNmVsaUm3D0HB46dIijR4/Srl07e5vNZgPA3d2dffv2Ub58+awNLclk5OewePHieHh44ObmZm+rUqUKZ86cIT4+Hk9PzyzNLNdl5PyNHj2axx57jCeeeAKAGjVqEBMTQ//+/Rk1ahSurupry+nSqmcKFCiQrb2yoJ7Z2+Lp6UloaCirV6+2t9lsNlavXk3Dhg1TvU/Dhg2THQ+wcuXKNI+XrJWRcwjw1ltv8dprr7FixQrq1auXHVElDY6ew8qVK7Njxw62bdtm/3rwwQdp2bIl27ZtIzg4ODvjCxn7OWzcuDEHDx60/yECsH//fooXL65CNptl5PxduXIlRcF67Q8TwzCyLqxkmhxVz2T7JWe5zPz58w0vLy9jzpw5xu7du43+/fsbAQEBxpkzZwzDMIzHHnvMeOmll+zHr1u3znB3dzfeeecdY8+ePcbYsWM1NZfFHD2HEydONDw9PY1FixYZp0+ftn9FR0db9S3keY6ew//SbAbWc/QcHjt2zPDz8zMGDRpk7Nu3z/juu++MoKAg4/XXX7fqW8jTHD1/Y8eONfz8/Ix58+YZhw8fNn766SejfPnyRqdOnaz6FvK86OhoY+vWrcbWrVsNwJg0aZKxdetW459//jEMwzBeeukl47HHHrMff21qrhdeeMHYs2ePMW3aNE3N5czef/99o3Tp0oanp6dRv359Y+PGjfbbmjdvbvTq1SvZ8QsXLjQqVqxoeHp6GtWqVTO+//77bE4s/+XIOSxTpowBpPgaO3Zs9gcXO0d/Dm+kYjZncPQcrl+/3mjQoIHh5eVllCtXznjjjTeMxMTEbE4t1zhy/hISEoxx48YZ5cuXN7y9vY3g4GDj6aefNi5evJj9wcUwDMP45ZdfUv2/7dp569Wrl9G8efMU96ldu7bh6elplCtXzpg9e3a25zYMw3AxDPXni4iIiIhz0phZEREREXFaKmZFRERExGmpmBURERERp6ViVkRERESclopZEREREXFaKmZFRERExGmpmBURERERp6ViVkRERESclopZERFgzpw5BAQEWB0jw1xcXFi6dOlNj+nduzcdOnTIljwiItlFxayI5Bq9e/fGxcUlxdfBgwetjsacOXPseVxdXSlVqhR9+vTh7NmzmfL4p0+fpm3btgAcPXoUFxcXtm3bluyYqVOnMmfOnEx5vrSMGzfO/n26ubkRHBxM//79uXDhgkOPo8JbRNLL3eoAIiKZ6d5772X27NnJ2ooUKWJRmuQKFCjAvn37sNlsbN++nT59+nDq1Cl+/PHH237sYsWK3fIYf3//236e9KhWrRqrVq0iKSmJPXv28PjjjxMZGcmCBQuy5flFJG9Rz6yI5CpeXl4UK1Ys2ZebmxuTJk2iRo0a5MuXj+DgYJ5++mkuX76c5uNs376dli1b4ufnR4ECBQgNDeWvv/6y3/7777/TtGlTfHx8CA4OZvDgwcTExNw0m4uLC8WKFaNEiRK0bduWwYMHs2rVKq5evYrNZuPVV1+lVKlSeHl5Ubt2bVasWGG/b3x8PIMGDaJ48eJ4e3tTpkwZJkyYkOyxrw0zKFu2LAB16tTBxcWFFi1aAMl7Oz/55BP+3979x0Rd/wEcf3YgccBRI3NyOUNTbm6pdUGFP9bCH5zzx01UKG+TDSKnIQ6yZI7Qm4OiBCfOks2JirdAWg0WCcUKPc9NiUI2yQMNlBZrCzYZi4sf9/7+4fysU8Cw7fv9Qq/Hdn+835/X+/15vT/88+LN+8MZjUa8Xq9PjlarleTkZK1dWVmJ2WwmMDCQ2bNnY7fbGRoaGnOd/v7+TJ8+naeeeorly5ezadMmvvnmG+368PAwKSkpzJo1C71ej8lk4tChQ9r1ffv2cfLkSSorK7Vd3vr6egA6OztJSEjg8ccfJywsDKvVSkdHx5j5CCEmNylmhRD/CjqdjqKiIq5evcrJkyf59ttveffdd0eNt9lszJgxg4aGBhobG8nKymLKlCkA3LhxA4vFwoYNG2hubqa8vJwLFy6QlpY2rpz0ej1er5ehoSEOHTpEQUEBBw4coLm5mbi4ONatW0dbWxsARUVFVFVVcebMGdxuNw6Hg4iIiBHnvXz5MgB1dXV0dXXx+eef3xezadMmuru7+e6777S+np4eampqsNlsADidTrZs2cLOnTtpaWmhuLiYEydOkJub+7fX2NHRQW1tLQEBAVqf1+tlxowZVFRU0NLSQk5ODnv27OHMmTMA7Nq1i4SEBCwWC11dXXR1dbFo0SIGBweJi4vDYDDgdDpxuVyEhIRgsVgYGBj42zkJISYZJYQQk0RSUpLy8/NTwcHB2mfjxo0jxlZUVKgnnnhCa5eUlKjHHntMaxsMBnXixIkRx6akpKg333zTp8/pdCqdTqf6+/tHHHPv/K2trSoyMlJFRUUppZQyGo0qNzfXZ0x0dLTavn27UkqpHTt2qNjYWOX1ekecH1BffPGFUkqp9vZ2Bagff/zRJyYpKUlZrVatbbVaVXJystYuLi5WRqNRDQ8PK6WUWrZsmcrLy/OZo7S0VIWHh4+Yg1JK7d27V+l0OhUcHKwCAwMVoABVWFg46hillHrrrbfUhg0bRs317r1NJpPPM/jzzz+VXq9XtbW1Y84vhJi85MysEGJSefXVV/nkk0+0dnBwMHBnl/L999/n2rVr9Pb2MjQ0hMfj4Y8//iAoKOi+eTIzM3njjTcoLS3V/lT+zDPPAHeOIDQ3N+NwOLR4pRRer5f29nbmzZs3Ym63b98mJCQEr9eLx+NhyZIlHDt2jN7eXn799VcWL17sE7948WKuXLkC3DkisGLFCkwmExaLhTVr1rBy5cp/9KxsNhupqal8/PHHPProozgcDl577TV0Op22TpfL5bMTOzw8POZzAzCZTFRVVeHxeDh9+jRNTU3s2LHDJ+bIkSMcP36cW7du0d/fz8DAAM8999yY+V65coXr169jMBh8+j0eDzdu3HiIJyCEmAykmBVCTCrBwcHMmTPHp6+jo4M1a9awbds2cnNzCQsL48KFC6SkpDAwMDBiUbZv3z42b95MdXU1Z8+eZe/evZSVlbF+/Xr6+vrYunUr6enp942bOXPmqLkZDAZ++OEHdDod4eHh6PV6AHp7ex+4LrPZTHt7O2fPnqWuro6EhASWL1/OZ5999sCxo1m7di1KKaqrq4mOjsbpdHLw4EHtel9fH3a7nfj4+PvGBgYGjjpvQECA9jP44IMPWL16NXa7nf379wNQVlbGrl27KCgoICYmBoPBwEcffcSlS5fGzLevr48XXnjB55eIu/5fXvITQvz3STErhJj0Ghsb8Xq9FBQUaLuOd89njiUyMpLIyEgyMjJ4/fXXKSkpYf369ZjNZlpaWu4rmh9Ep9ONOCY0NBSj0YjL5eKVV17R+l0uFy+++KJPXGJiIomJiWzcuBGLxUJPTw9hYWE+8909nzo8PDxmPoGBgcTHx+NwOLh+/Tomkwmz2axdN5vNuN3uca/zXtnZ2cTGxrJt2zZtnYsWLWL79u1azL07qwEBAfflbzabKS8vZ9q0aYSGhv6jnIQQk4e8ACaEmPTmzJnD4OAghw8f5ueff6a0tJSjR4+OGt/f309aWhr19fXcvHkTl8tFQ0ODdnxg9+7dXLx4kbS0NJqammhra6OysnLcL4D91TvvvEN+fj7l5eW43W6ysrJoampi586dABQWFvLpp59y7do1WltbqaioYPr06SN+0cO0adPQ6/XU1NTw22+/cfv27VHva7PZqK6u5vjx49qLX3fl5ORw6tQp7HY7V69e5aeffqKsrIzs7OxxrS0mJoYFCxaQl5cHwNy5c/n++++pra2ltbWV9957j4aGBp8xERERNDc343a7+f333xkcHMRmszF16lSsVitOp5P29nbq6+tJT0/nl19+GVdOQojJQ4pZIcSkt3DhQgoLC8nPz+fZZ5/F4XD4/Fure/n5+dHd3c2WLVuIjIwkISGBVatWYbfbAViwYAHnzp2jtbWVpUuX8vzzz5OTk4PRaHzoHNPT08nMzOTtt99m/vz51NTUUFVVxdy5c4E7RxQ+/PBDoqKiiI6OpqOjg6+++krbaf4rf39/ioqKKC4uxmg0YrVaR71vbGwsYWFhuN1uNm/e7HMtLi6OL7/8kq+//pro6GhefvllDh48yNNPPz3u9WVkZHDs2DE6OzvZunUr8fHxJCYm8tJLL9Hd3e2zSwuQmpqKyWQiKiqKJ598EpfLRVBQEOfPn2fmzJnEx8czb948UlJS8Hg8slMrxL/YI0op9b9OQgghhBBCiIchO7NCCCGEEGLCkmJWCCGEEEJMWFLMCiGEEEKICUuKWSGEEEIIMWFJMSuEEEIIISYsKWaFEEIIIcSEJcWsEEIIIYSYsKSYFUIIIYQQE5YUs0IIIYQQYsKSYlYIIYQQQkxYUswKIYQQQogJ6z95jW+wSQ8drQAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"code","source":["print(auc)"],"metadata":{"id":"1ISbQGIReSHh","executionInfo":{"status":"ok","timestamp":1721625906765,"user_tz":-540,"elapsed":352,"user":{"displayName":"髙光耕平","userId":"17386064361986607853"}},"outputId":"2d46ed92-d43c-42dc-80ed-c35fdac6941b","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["0.9332072832503125\n"]}]},{"cell_type":"code","source":["#データ読み込み\n","df_test=pd.read_csv(\"/content/bank_test.csv\")"],"metadata":{"id":"b3Ug2VdjS6ZG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_test = data_pre(df_test)"],"metadata":{"id":"2txLiRSxWbwG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["predict = model.predict(df_test)\n","df_test[\"y\"]=predict"],"metadata":{"id":"EaOkKA8OYMMo","executionInfo":{"status":"error","timestamp":1720585543901,"user_tz":-540,"elapsed":456,"user":{"displayName":"髙光耕平","userId":"17386064361986607853"}},"colab":{"base_uri":"https://localhost:8080/","height":346},"outputId":"08e802d2-99cf-420c-b035-9e173dbd7105"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"pandas dtypes must be int, float or bool.\nFields with bad pandas dtypes: job: object, marital: object, education: object, default: object, loan: object","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-3d6673b61c13>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpredict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdf_test\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"y\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/lightgbm/basic.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, data, start_iteration, num_iteration, raw_score, pred_leaf, pred_contrib, data_has_header, validate_features, **kwargs)\u001b[0m\n\u001b[1;32m   4218\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4219\u001b[0m                 \u001b[0mnum_iteration\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4220\u001b[0;31m         return predictor.predict(\n\u001b[0m\u001b[1;32m   4221\u001b[0m             \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4222\u001b[0m             \u001b[0mstart_iteration\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstart_iteration\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/lightgbm/basic.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, data, start_iteration, num_iteration, raw_score, pred_leaf, pred_contrib, data_has_header, validate_features)\u001b[0m\n\u001b[1;32m   1002\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1003\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpd_DataFrame\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1004\u001b[0;31m             data = _data_from_pandas(\n\u001b[0m\u001b[1;32m   1005\u001b[0m                 \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1006\u001b[0m                 \u001b[0mfeature_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"auto\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/lightgbm/basic.py\u001b[0m in \u001b[0;36m_data_from_pandas\u001b[0;34m(data, feature_name, categorical_feature, pandas_categorical)\u001b[0m\n\u001b[1;32m    701\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    702\u001b[0m     \u001b[0;31m# get numpy representation of the data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 703\u001b[0;31m     \u001b[0m_check_for_bad_pandas_dtypes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtypes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    704\u001b[0m     \u001b[0mdf_dtypes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mdtype\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtypes\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    705\u001b[0m     \u001b[0mdf_dtypes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# so that the target dtype considers floats\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/lightgbm/basic.py\u001b[0m in \u001b[0;36m_check_for_bad_pandas_dtypes\u001b[0;34m(pandas_dtypes_series)\u001b[0m\n\u001b[1;32m    664\u001b[0m     ]\n\u001b[1;32m    665\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mbad_pandas_dtypes\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 666\u001b[0;31m         raise ValueError('pandas dtypes must be int, float or bool.\\n'\n\u001b[0m\u001b[1;32m    667\u001b[0m                          f'Fields with bad pandas dtypes: {\", \".join(bad_pandas_dtypes)}')\n\u001b[1;32m    668\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: pandas dtypes must be int, float or bool.\nFields with bad pandas dtypes: job: object, marital: object, education: object, default: object, loan: object"]}]},{"cell_type":"code","source":["df_ID=df_test[\"id\"]\n","df_test[\"id\"]=df_ID.astype(int)"],"metadata":{"id":"LDjXjV1VYSSw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_test.to_csv(\"sample_submit.csv\",columns=['id', 'y'],index = False,header = False)"],"metadata":{"id":"amUwEpogYwA5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lgb.plot_importance(model)"],"metadata":{"id":"jBXjd-l3ZVJC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, roc_curve, confusion_matrix\n","# 予測（確率）\n","predict_prob = model.predict(val_x)\n","# 予測（クラス）\n","threshold = 0.5\n","predict_class = (predict_prob >= threshold).astype(int)\n","# 混同行列\n","conf_matrix = confusion_matrix(val_y, predict_class)\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Negative', 'Positive'], yticklabels=['Negative', 'Positive'])\n","plt.xlabel('Predicted')\n","plt.ylabel('Actual')\n","plt.title('Confusion Matrix')\n","plt.show()"],"metadata":{"id":"0I_sPZIfleP8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, roc_curve, confusion_matrix\n","# 評価指標\n","accuracy = accuracy_score(val_y, predict_class)\n","precision = precision_score(val_y, predict_class)\n","recall = recall_score(val_y, predict_class)\n","f1 = f1_score(val_y, predict_class)\n","roc_auc = roc_auc_score(val_y, predict_prob)\n","\n","print(f'Accuracy: {accuracy:.2f}')\n","print(f'Precision: {precision:.2f}')\n","print(f'Recall: {recall:.2f}')\n","print(f'F1 Score: {f1:.2f}')\n","print(f'ROC AUC: {roc_auc:.2f}')"],"metadata":{"id":"the3aK6J4Ufs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"HuEepP6bTxVi"},"execution_count":null,"outputs":[]}]}